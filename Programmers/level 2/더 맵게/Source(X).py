import heapq
def solution(scoville, K):
    sc = scoville
    heapq.heapify(sc)
    
    ms1 = heapq.heappop(sc)
    cnt = 0
    while True:
        ms2 = heapq.heappop(sc)
        nK = ms1 + (ms2 * 2)
        cnt += 1
        
        if len(sc) > 0:
            if nK >= K:
                heapq.heappush(sc, nK)
                if sc[0] >= K:
                    return cnt
                else:
                    ms1 = heapq.heappop()
            else:
                ms1 = nK
                    
        else:
            if nK >= K:
                return cnt
            else:
                return -1
        
        
    return cnt

# 정확성  테스트
# 테스트 1 〉	통과 (0.00ms, 10.2MB)
# 테스트 2 〉	통과 (0.00ms, 10.2MB)
# 테스트 3 〉	통과 (0.01ms, 10.3MB)
# 테스트 4 〉	실패 (런타임 에러)
# 테스트 5 〉	실패 (런타임 에러)
# 테스트 6 〉	실패 (0.44ms, 10.1MB)
# 테스트 7 〉	실패 (런타임 에러)
# 테스트 8 〉	통과 (0.03ms, 10.1MB)
# 테스트 9 〉	실패 (런타임 에러)
# 테스트 10 〉	실패 (런타임 에러)
# 테스트 11 〉	실패 (0.14ms, 10.1MB)
# 테스트 12 〉	실패 (런타임 에러)
# 테스트 13 〉	실패 (0.41ms, 10.2MB)
# 테스트 14 〉	통과 (0.03ms, 10.1MB)
# 테스트 15 〉	실패 (런타임 에러)
# 테스트 16 〉	통과 (0.01ms, 10.1MB)
# 테스트 17 〉	통과 (0.01ms, 10.3MB)
# 테스트 18 〉	실패 (0.00ms, 10.2MB)
# 테스트 19 〉	실패 (런타임 에러)
# 테스트 20 〉	통과 (0.00ms, 10.3MB)
# 테스트 21 〉	통과 (0.01ms, 10.1MB)
# 테스트 22 〉	통과 (0.00ms, 10.1MB)
# 테스트 23 〉	통과 (0.01ms, 10MB)
# 테스트 24 〉	통과 (0.01ms, 10MB)
# 테스트 25 〉	통과 (0.01ms, 10.1MB)
# 테스트 26 〉	실패 (0.01ms, 10.1MB)
# 
# 효율성  테스트
# 테스트 1 〉	실패 (런타임 에러)
# 테스트 2 〉	실패 (런타임 에러)
# 테스트 3 〉	실패 (런타임 에러)
# 테스트 4 〉	실패 (런타임 에러)
# 테스트 5 〉	실패 (런타임 에러)
# 
# 채점 결과
# 정확성: 41.9
# 효율성: 0.0
# 합계: 41.9 / 100.0